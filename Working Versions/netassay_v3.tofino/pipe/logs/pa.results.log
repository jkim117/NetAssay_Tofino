+---------------------------------------------------------------------+
|  Log file: pa.results.log                                           |
|  Compiler version: 9.1.0                                            |
|  Created on: Tue Jul 14 18:08:54 2020                               |
|  Run ID: d9ff36a850879690                                           |
+---------------------------------------------------------------------+

Allocation state: Final Allocation
------------------------------------------------------------------------------
|       PHV Group        | Containers Used |   Bits Used   | Bits Available |
| (container bit widths) |     (% used)    |    (% used)   |                |
------------------------------------------------------------------------------
|         0 (32)         |   16 (100.00%)  | 512 (100.00%) |      512       |
|         1 (32)         |    0 (0.00%)    |   0 (0.00%)   |      512       |
|         2 (32)         |    0 (0.00%)    |   0 (0.00%)   |      512       |
|         3 (32)         |    0 (0.00%)    |   0 (0.00%)   |      512       |
|    Total for 32 bit    |   16 (25.00%)   |  512 (25.00%) |      2048      |
|                        |                 |               |                |
|         4 (8)          |    9 (56.25%)   |  58 (45.31%)  |      128       |
|         5 (8)          |    0 (0.00%)    |   0 (0.00%)   |      128       |
|         6 (8)          |    0 (0.00%)    |   0 (0.00%)   |      128       |
|         7 (8)          |    0 (0.00%)    |   0 (0.00%)   |      128       |
|    Total for 8 bit     |    9 (14.06%)   |  58 (11.33%)  |      512       |
|                        |                 |               |                |
|         8 (16)         |   13 (81.25%)   |  202 (78.91%) |      256       |
|         9 (16)         |    1 (6.25%)    |   9 (3.52%)   |      256       |
|        10 (16)         |    0 (0.00%)    |   0 (0.00%)   |      256       |
|        11 (16)         |    0 (0.00%)    |   0 (0.00%)   |      256       |
|        12 (16)         |    0 (0.00%)    |   0 (0.00%)   |      256       |
|        13 (16)         |    0 (0.00%)    |   0 (0.00%)   |      256       |
|    Total for 16 bit    |   14 (14.58%)   |  211 (13.74%) |      1536      |
|                        |                 |               |                |
|       14 (32) T        |    4 (25.00%)   |  128 (25.00%) |      512       |
|       15 (32) T        |    0 (0.00%)    |   0 (0.00%)   |      512       |
|    Total for 32 bit    |    4 (12.50%)   |  128 (12.50%) |      1024      |
|                        |                 |               |                |
|        16 (8) T        |    4 (25.00%)   |  32 (25.00%)  |      128       |
|        17 (8) T        |    0 (0.00%)    |   0 (0.00%)   |      128       |
|    Total for 8 bit     |    4 (12.50%)   |  32 (12.50%)  |      256       |
|                        |                 |               |                |
|       18 (16) T        |    7 (43.75%)   |  112 (43.75%) |      256       |
|       19 (16) T        |    0 (0.00%)    |   0 (0.00%)   |      256       |
|       20 (16) T        |    0 (0.00%)    |   0 (0.00%)   |      256       |
|    Total for 16 bit    |    7 (14.58%)   |  112 (14.58%) |      768       |
|                        |                 |               |                |
|       MAU total        |   39 (17.41%)   |  781 (19.07%) |      4096      |
|     Tagalong total     |   15 (13.39%)   |  272 (13.28%) |      2048      |
|     Overall total      |   54 (16.07%)   | 1053 (17.14%) |      6144      |
------------------------------------------------------------------------------

--------------------------------------------
PHV Allocation
--------------------------------------------

Allocations in Group 0 32 bits
  32-bit PHV 0 (ingress): phv0[31:0] = ingress::p.ipv4.src[31:0] (deparsed)
  32-bit PHV 1 (ingress): phv1[31:0] = ingress::p.dns_ip.rdata[31:0]
  32-bit PHV 2 (ingress): phv2[31:0] = ingress::p.ipv4.dst[31:0] (deparsed)
  32-bit PHV 3 (ingress): phv3[31:0] = ingress::ig_md.domain_id_dns[31:0]
  32-bit PHV 4 (ingress): phv4[31:0] = ingress::p.q4_part4.part[31:0]
  32-bit PHV 4 (ingress): phv4[31:0] = ingress::domain_id_0[31:0]
  32-bit PHV 5 (ingress): phv5[31:0] = ingress::p.q4_part8_1.part[31:0]
  32-bit PHV 5 (ingress): phv5[17:0] = ingress::ig_md.index_1_dns[31:14]
  32-bit PHV 6 (ingress): phv6[31:0] = ingress::p.q4_part8_2.part[31:0]
  32-bit PHV 6 (ingress): phv6[17:0] = ingress::ig_md.index_2_dns[31:14]
  32-bit PHV 7 (ingress): phv7[31:0] = ingress::p.q3_part4.part[31:0]
  32-bit PHV 8 (ingress): phv8[31:0] = ingress::p.q3_part8_1.part[31:0]
  32-bit PHV 9 (ingress): phv9[31:0] = ingress::p.q3_part8_2.part[31:0]
  32-bit PHV 10 (ingress): phv10[31:0] = ingress::p.q2_part4.part[31:0]
  32-bit PHV 11 (ingress): phv11[31:0] = ingress::p.q2_part8_1.part[31:0]
  32-bit PHV 12 (ingress): phv12[31:0] = ingress::p.q2_part8_2.part[31:0]
  32-bit PHV 13 (ingress): phv13[31:0] = ingress::p.q1_part4.part[31:0]
  32-bit PHV 14 (ingress): phv14[31:0] = ingress::p.q1_part8_1.part[31:0]
  32-bit PHV 15 (ingress): phv15[31:0] = ingress::p.q1_part8_2.part[31:0]
  >> 16 in ingress and 0 in egress

Allocations in Group 4 8 bits
  8-bit PHV 64 (ingress): phv64[2:0] = ingress::ig_intr_md_for_dprsr.resubmit_type[2:0] (deparsed)
  8-bit PHV 65 (ingress): phv65[6:5] = ingress::index_3[31:30]
  8-bit PHV 65 (ingress): phv65[4:3] = ingress::index_0[31:30]
  8-bit PHV 65 (ingress): phv65[3:3] = ingress::ig_md.matched_domain[0:0]
  8-bit PHV 65 (ingress): phv65[2:2] = ingress::p.udp.$valid[0:0] (deparsed)
  8-bit PHV 65 (ingress): phv65[1:1] = ingress::p.ipv4.$valid[0:0] (deparsed)
  8-bit PHV 65 (ingress): phv65[0:0] = ingress::p.ethernet.$valid[0:0] (deparsed)
  8-bit PHV 66 (ingress): phv66[7:0] = ingress::p.q1_part1.part[7:0]
  8-bit PHV 66 (ingress): phv66[0:0] = ingress::entry_matched_0[0:0]
  8-bit PHV 67 (ingress): phv67[7:0] = ingress::p.q2_part1.part[7:0]
  8-bit PHV 67 (ingress): phv67[0:0] = ingress::ig_md.already_matched[0:0]
  8-bit PHV 68 (ingress): phv68[7:0] = ingress::p.q3_part1.part[7:0]
  8-bit PHV 68 (ingress): phv68[0:0] = ingress::is_match_0[0:0]
  8-bit PHV 69 (ingress): phv69[7:0] = ingress::p.q4_part1.part[7:0]
  8-bit PHV 69 (ingress): phv69[0:0] = ingress::timed_out_0[0:0]
  8-bit PHV 70 (ingress): phv70[6:1] = SwitchIngress.sip_cip_reg_1$index[13:8]
  8-bit PHV 70 (ingress): phv70[0:0] = ingress::ig_md.is_ip[0:0]
  8-bit PHV 70 (ingress): phv70[0:0] = ingress::is_match_1[0:0]
  8-bit PHV 71 (ingress): phv71[0:0] = ingress::ig_md.parsed_answer[0:0]
  8-bit PHV 71 (ingress): phv71[0:0] = ingress::timed_out_1[0:0]
  8-bit PHV 72 (ingress): phv72[7:0] = SwitchIngress.sip_cip_reg_1$index[7:0]
  >> 9 in ingress and 0 in egress

Allocations in Group 8 16 bits
  16-bit PHV 128 (ingress): phv128[15:0] = ingress::p.ipv4.len[15:0] (deparsed)
  16-bit PHV 129 (ingress): phv129[15:0] = ingress::ig_intr_md_from_prsr.global_tstamp[31:16]
  16-bit PHV 130 (ingress): phv130[15:0] = ingress::ig_intr_md_from_prsr.global_tstamp[15:0]
  16-bit PHV 131 (ingress): phv131[15:15] = ingress::ig_intr_md.resubmit_flag[0:0]
  16-bit PHV 131 (ingress): phv131[13:0] = ingress::$concat_to_slice1[13:0]
  16-bit PHV 131 (ingress): phv131[13:0] = ingress::$concat_to_slice5[13:0]
  16-bit PHV 131 (ingress): phv131[13:0] = SwitchIngress.domain_tstamp_reg_2$index[13:0]
  16-bit PHV 132 (ingress): phv132[15:0] = ingress::p.q4_part2.part[15:0]
  16-bit PHV 132 (ingress): phv132[13:0] = ingress::ig_md.index_1_dns[13:0]
  16-bit PHV 133 (ingress): phv133[15:0] = ingress::p.q3_part2.part[15:0]
  16-bit PHV 133 (ingress): phv133[13:0] = ingress::$concat_to_slice3[13:0]
  16-bit PHV 134 (ingress): phv134[15:0] = ingress::p.q2_part2.part[15:0]
  16-bit PHV 134 (ingress): phv134[13:0] = ingress::ig_md.index_2_dns[13:0]
  16-bit PHV 135 (ingress): phv135[15:0] = ingress::p.q1_part2.part[15:0]
  16-bit PHV 136 (ingress): phv136[13:0] = ingress::index_0[13:0]
  16-bit PHV 137 (ingress): phv137[14:14] = ingress::ig_md.is_dns[0:0]
  16-bit PHV 137 (ingress): phv137[14:14] = ingress::sip_cip_matched_0[0:0]
  16-bit PHV 137 (ingress): phv137[13:0] = ingress::$concat_to_slice7[13:0]
  16-bit PHV 138 (ingress): phv138[13:0] = ingress::index_3[13:0]
  16-bit PHV 139 (ingress): phv139[15:0] = ingress::index_0[29:14]
  16-bit PHV 140 (ingress): phv140[15:0] = ingress::index_3[29:14]
  >> 13 in ingress and 0 in egress

Allocations in Group 9 16 bits
  16-bit PHV 144 (egress): phv144[8:0] = egress::eg_intr_md.egress_port[8:0] (deparsed)
  >> 0 in ingress and 1 in egress

Allocations in Group 14 32 bits (tagalong)
  32-bit PHV 256 (ingress): phv256[31:16] = ingress::p.ipv4.id[15:0] (tagalong capable) (deparsed)
  32-bit PHV 256 (ingress): phv256[15:13] = ingress::p.ipv4.flags[2:0] (tagalong capable) (deparsed)
  32-bit PHV 256 (ingress): phv256[12:0] = ingress::p.ipv4.frag[12:0] (tagalong capable) (deparsed)
  32-bit PHV 257 (ingress): phv257[31:24] = ingress::p.ipv4.ttl[7:0] (tagalong capable) (deparsed)
  32-bit PHV 257 (ingress): phv257[23:16] = ingress::p.ipv4.proto[7:0] (tagalong capable) (deparsed)
  32-bit PHV 257 (ingress): phv257[15:0] = ingress::p.ipv4.chksum[15:0] (tagalong capable) (deparsed)
  32-bit PHV 258 (ingress): phv258[31:16] = ingress::p.ethernet.src[15:0] (tagalong capable) (deparsed)
  32-bit PHV 258 (ingress): phv258[15:0] = ingress::p.ethernet.etherType[15:0] (tagalong capable) (deparsed)
  32-bit PHV 259 (ingress): phv259[31:16] = ingress::p.udp.sport[15:0] (tagalong capable) (deparsed)
  32-bit PHV 259 (ingress): phv259[15:0] = ingress::p.udp.dport[15:0] (tagalong capable) (deparsed)
  >> 4 in ingress and 0 in egress

Allocations in Group 16 8 bits (tagalong)
  8-bit PHV 288 (ingress): phv288[7:0] = ingress::p.ethernet.src[23:16] (tagalong capable) (deparsed)
  8-bit PHV 289 (ingress): phv289[7:0] = ingress::p.ethernet.src[31:24] (tagalong capable) (deparsed)
  8-bit PHV 290 (ingress): phv290[7:0] = ingress::p.ethernet.src[39:32] (tagalong capable) (deparsed)
  8-bit PHV 291 (ingress): phv291[7:0] = ingress::p.ethernet.src[47:40] (tagalong capable) (deparsed)
  >> 4 in ingress and 0 in egress

Allocations in Group 18 16 bits (tagalong)
  16-bit PHV 320 (ingress): phv320[15:12] = ingress::p.ipv4.version[3:0] (tagalong capable) (deparsed)
  16-bit PHV 320 (ingress): phv320[11:8] = ingress::p.ipv4.ihl[3:0] (tagalong capable) (deparsed)
  16-bit PHV 320 (ingress): phv320[7:0] = ingress::p.ipv4.tos[7:0] (tagalong capable) (deparsed)
  16-bit PHV 321 (ingress): phv321[15:0] = ingress::p.udp.chksum[15:0] (tagalong capable) (deparsed)
  16-bit PHV 322 (ingress): phv322[15:0] = ingress::p.udp.len[15:0] (tagalong capable) (deparsed)
  16-bit PHV 323 (ingress): phv323[15:0] = ingress::ig_intr_md_from_prsr.global_tstamp[47:32] (tagalong capable)
  16-bit PHV 324 (ingress): phv324[15:0] = ingress::p.ethernet.dst[31:16] (tagalong capable) (deparsed)
  16-bit PHV 325 (ingress): phv325[15:0] = ingress::p.ethernet.dst[47:32] (tagalong capable) (deparsed)
  16-bit PHV 326 (ingress): phv326[15:0] = ingress::p.ethernet.dst[15:0] (tagalong capable) (deparsed)
  >> 7 in ingress and 0 in egress


Final POV layout (ingress):

Final POV layout (egress):
